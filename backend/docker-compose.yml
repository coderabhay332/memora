version: '3.8'

services:
  # Backend Node.js application
  memora-backend:
    build: .
    container_name: memora-backend
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=mongodb://mongodb:27017/memora
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - mongodb
      - rabbitmq
    volumes:
      - ./.env:/app/.env:ro
    networks:
      - memora-network
    restart: unless-stopped

  # MongoDB database
  mongodb:
    image: mongo:7
    container_name: memora-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=memora
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d:ro
    networks:
      - memora-network
    restart: unless-stopped

  # RabbitMQ message broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: memora-rabbitmq
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - memora-network
    restart: unless-stopped

  # Redis (optional - for caching if needed)
  redis:
    image: redis:7-alpine
    container_name: memora-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - memora-network
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  mongodb_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local

networks:
  memora-network:
    driver: bridge
