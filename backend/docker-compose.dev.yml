version: '3.8'

services:
  # Backend Node.js application (development mode)
  memora-backend-dev:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: memora-backend-dev
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - MONGODB_URI=mongodb://mongodb:27017/memora_dev
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - mongodb
      - rabbitmq
    volumes:
      - .:/app
      - /app/node_modules
      - ./.env:/app/.env:ro
    networks:
      - memora-dev-network
    restart: unless-stopped
    command: npm run start

  # MongoDB database
  mongodb:
    image: mongo:7
    container_name: memora-mongodb-dev
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=memora_dev
    volumes:
      - mongodb_dev_data:/data/db
    networks:
      - memora-dev-network
    restart: unless-stopped

  # RabbitMQ message broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: memora-rabbitmq-dev
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    volumes:
      - rabbitmq_dev_data:/var/lib/rabbitmq
    networks:
      - memora-dev-network
    restart: unless-stopped

  # Redis (optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: memora-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - memora-dev-network
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  mongodb_dev_data:
    driver: local
  rabbitmq_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  memora-dev-network:
    driver: bridge
