import { 
  IChat, 
  IMessage, 
  CreateChatResponse, 
  GetChatResponse, 
  AddMessageRequest, 
  AddMessageResponse, 
  DeleteChatResponse 
} from '../types/chat';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';

class ChatApiService {
  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    const token = localStorage.getItem('token');
    
    const response = await fetch(`${API_BASE_URL}${endpoint}`, {
      headers: {
        'Content-Type': 'application/json',
        ...(token && { Authorization: `Bearer ${token}` }),
        ...options.headers,
      },
      ...options,
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(error || `HTTP error! status: ${response.status}`);
    }

    return response.json();
  }
 

  // Create a new chat
  async createChat(): Promise<CreateChatResponse> {
    console.log(localStorage.getItem('access_token'));
    return this.request<CreateChatResponse>('/api/chat/create', {
      headers: {
        'Content-Type': 'application/json',
        accessToken: localStorage.getItem('access_token') || '',
      },
      method: 'POST',
    });
  }

  // Get a specific chat by ID
  async getChat(chatId: string): Promise<GetChatResponse> {
    return this.request<GetChatResponse>(`/api/chat/${chatId}`);
  }

  // Get all chats for the current user
  async getAllChats(): Promise<{ success: boolean; data: IChat[] }> {
    return this.request<{ success: boolean; data: IChat[] }>('/api/chat');
  }

  // Add a message to a chat
  async addMessage(chatId: string, messageData: AddMessageRequest): Promise<AddMessageResponse> {
    return this.request<AddMessageResponse>(`/api/chat/${chatId}/message`, {
      method: 'POST',
      body: JSON.stringify(messageData),
    });
  }

  // Delete a chat
  async deleteChat(chatId: string): Promise<DeleteChatResponse> {
    return this.request<DeleteChatResponse>(`/api/chat/${chatId}`, {
      method: 'DELETE',
    });
  }

  // Send a message and get AI response (RAG functionality)
  async sendMessageWithRAG(chatId: string, message: string): Promise<AddMessageResponse> {
    // First add the user message
    await this.addMessage(chatId, {
      role: 'user',
      message: message,
    });

    // Then get AI response (this would integrate with your RAG backend)
    // For now, we'll simulate an AI response
    const aiResponse = await this.generateAIResponse(message);
    
    return this.addMessage(chatId, {
      role: 'assistant',
      message: aiResponse,
    });
  }

  // Simulate AI response generation (replace with actual RAG implementation)
  private async generateAIResponse(userMessage: string): Promise<string> {
    // This is where you'd integrate with your RAG system
    // For now, return a placeholder response
    await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate processing time
    
    return `I understand you said: "${userMessage}". This is a placeholder response. In a real implementation, this would be generated by your RAG system based on your knowledge base.`;
  }
}

export const chatApiService = new ChatApiService();
export default chatApiService;
